import random
import requests
import sys

# More things to add potentially!

# high scores
# split the deck in two sets at the beginning?
# create an empty list then add to it?
# number to keep track of how many cards in each persons hand
# starter gets 11 cards, other gets 12
# you win their card if they lose and it goes to the back of your deck
# whoever has the most cards at the end of the rounds wins

# handy lists and strings
affirmative = ['y',
               'ye',
               'yee',
               'yes',
               'yep',
               'yea',
               'yeah',
               'yuh-huh',
               ]
negative = ['n',
            'no',
            'noo',
            'na',
            'nah',
            'nope',
            'nuh-uh',
            ]
affneg = affirmative + negative
catas = ['birth year',
         'house',
         'ancestry',
         'magic points'
         ]
actions = ['rules',
           'quit']
num_word_list = [
    'zero',
    'one',
    'two',
    'three',
    'four',
    'five',
    'six',
    'seven',
    'eight',
    'nine',
    'ten',
]
num_dic = {
    'one': 1,
    'two': 2,
    'three': 3,
    'four': 4,
    'five': 5,
    'six': 6,
    'seven': 7,
    'eight': 8,
    'nine': 9,
    'ten': 10,
}
num_int_list = []
for x in range(0, 51):
    num_int_list.append(str(x))

num_str_list = num_word_list + num_int_list
valid_response = affneg + num_str_list + catas
check = ['quit', 'rules']
welcome = "\nHello and welcome to our game of Harry Potter Top Trumps!\n"
ruready = "\nAre you ready to play?\n"
hmrounds = "\nHow many rounds would you like to play?\n"
nocomprende = "\nSorry, I didn't understand '"
pta = "'. Please try again."
whichstat = "\nWhich stat would you like to use?\n"
suqi = "\nAre you sure you want to quit playing?\n"
wupl = "\nWould you like to play again?\n"
nxtm = "\nOkay then! Maybe next time."
gdbi = "\nGoodbye then, hope you enjoyed playing!"
win = '\nYou win this round!'
lose = '\nYou lose this round!'
draw = "\nYou've drawn this round!"
comparison = 'The opponent selected {}, and their {} was {}.\n'

comp_deck = range(0,22)


def art():
    print('INSERT ART HERE')


def generate_rand_int(min, max):
    random_int = random.randint(min, max)
    return random_int


def get_characters():
    url = "http://hp-api.herokuapp.com/api/characters"
    response = requests.get(url)
    my_characters = response.json()
    return my_characters


def random_character_adj():
    # change my_int to take number values from each number list
    my_int = generate_rand_int(min=0, max=22)
    characters = get_characters()

    character_name = characters[my_int]['name']
    character_house = characters[my_int]['house']
    character_ancestry = characters[my_int]['ancestry']
    character_birth_year = characters[my_int]['yearOfBirth']
    character_mp = len(characters[my_int]['actor'])

    # # defining these generally first, then empty entries can be corrected
    # character_name = random_character_name
    # character_house = random_character_house
    # character_ancestry = random_character_ancestry
    # character_birth_year = random_character_birth_year
    # character_mp = random_character_mp

    if my_int == 4 or my_int == 6 or my_int == 10:
        character_ancestry = 'half-blood'
        if my_int == 6:
            character_birth_year = 1979
    elif my_int == 5:
        character_ancestry = 'pure-blood'
    elif my_int == 17:
        character_birth_year = 1882  # between 1882 and 1913
    elif my_int == 18:
        character_house = 'Ravenclaw'
        character_birth_year = 1973  # or earlier
    elif my_int == 19:
        character_birth_year = 1946  # or earlier
    elif my_int == 21:
        character_birth_year = 1980
    elif my_int == 22:
        character_birth_year = 1979

    random_character_dict = {
        'name': character_name,
        'house': character_house,
        'ancestry': character_ancestry,
        'birth year': character_birth_year,
        'magic points': character_mp,
    }
    return random_character_dict


def random_cata():
    rc = generate_rand_int(min=0, max=3)
    return rc


def random_cata2():
    rc = generate_rand_int(min=0, max=2)
    return rc


def rules():
    print("""
The game works as follows.
You and the computer will both be given a card with four categories.
These categories are birth year, house, ancestry and magic points.
You get to look at your card and decide which category looks like your best chance of winning the round.
So, for birth year, the oldest wins.\nFor house, Gryffindor defeats Hufflepuff defeats Ravenclaw defeats Slytherin.
For ancestry, it works a bit like rock, paper, scissors.
i.e. muggleborn defeats pure-blood defeats half-blood defeats muggleborn etc.
And finally, for magic points, the card with the higher number defeats the other.\nAnd that's it!""")


def ancestry_win(my_stat, opponent_stat):
    if my_stat == 'half-blood' and opponent_stat == 'muggleborn':
        return True
    elif my_stat == 'muggleborn' and opponent_stat == 'pure-blood':
        return True
    elif my_stat == 'pure-blood' and opponent_stat == 'half-blood':
        return True
    elif my_stat == 'half-blood' and opponent_stat == 'pure-blood':
        return False
    elif my_stat == 'muggleborn' and opponent_stat == 'half-blood':
        return False
    elif my_stat == 'pure-blood' and opponent_stat == 'muggle-born':
        return False


def rules_quit_checker(my_answer, current_question):
    if my_answer == 'quit':
        sure = input(suqi).lower()
        while sure not in affneg:
            if sure in affirmative:
                print(gdbi)
                sys.exit()
            elif sure in negative:
                my_answer = input(current_question).lower()
                if my_answer in affneg:
                    break
                elif my_answer == 'quit':
                    continue
                elif my_answer == 'rules':
                    rules()
                    break
                else:
                    continue
            elif sure == 'quit':
                print(gdbi)
                sys.exit()
            elif sure == 'rules':
                break
            else:
                sure = input(nocomprende + sure + pta + suqi)
        if sure in affirmative:
            print(gdbi)
            sys.exit()
        elif sure in negative:
            my_answer = input(current_question).lower()
            while my_answer not in valid_response:
                if my_answer in affneg:
                    break
                elif my_answer == 'quit':
                    continue
                elif my_answer == 'rules':
                    rules()
                    break
                else:
                    continue
        elif sure == 'quit':
            print(gdbi)
            sys.exit()
        elif sure == 'rules':
            rules()
    elif my_answer == 'rules':
        rules()


def run():
    user_score = 0
    comp_score = 0

    ready = input(ruready).lower()

    while ready not in affneg:
        if ready in check:
            rules_quit_checker(ready, ruready)
            break
        elif ready in affneg:
            break
        else:
            ready = input(nocomprende + ready + pta + ruready).lower()
            continue

    if ready in affirmative:
        number_reply = input(hmrounds).lower()

        while number_reply not in num_str_list:
            if number_reply in check:
                rules_quit_checker(number_reply, hmrounds)
                number_reply = input(hmrounds).lower()
                if number_reply in num_str_list:
                    break
                elif number_reply in check:
                    rules_quit_checker(number_reply, hmrounds)
                    number_reply = input(hmrounds).lower()
                else:
                    break
            elif number_reply in num_str_list:
                break
            else:
                number_reply = input(nocomprende + number_reply + pta + hmrounds).lower()
                continue

        if number_reply in num_word_list:
            if number_reply in num_dic:
                number_rounds = num_dic[number_reply]
            elif number_reply == 'zero':
                print(nxtm)
                sys.exit()
        elif number_reply in num_int_list:
            if number_reply == '0':
                print(nxtm)
                sys.exit()
            else:
                number_rounds = int(number_reply)

        coin_toss = generate_rand_int(min=0, max=1)
        print("\nOur coin toss decides whether you or the computer picks the stats!")
        if coin_toss == 0:
            print("You win the coin toss! You get to choose.")
            # user_deck_start = 11
            # comp_deck_start = 12
            # user_deck = random.sample(range(22),11)
        elif coin_toss == 1:
            print("The computer wins the coin toss. It gets to choose.")
            # user_deck_start = 12
            # comp_deck_start = 11
            # user_deck_no = random.sample(range(22),12)

        # here, find a way to randomly assign the 0 to 22 cards to user and computer
        # I'm thinking perhaps the easiest way would be to pick numbers

        # for loop to make the game last for Y rounds
        # or until cards run out?
        for Y in range(0, number_rounds):

            my_character = random_character_adj()
            opponent_character = random_character_adj()

            print('\nYou were given {}.'.format(my_character['name']))
            print('These are their stats.')
            print('Birth Year: {}\n'
                  'House: {}\n'
                  'Ancestry: {}\n'
                  'Magic points: {}'.format(my_character['birth year'],
                                            my_character['house'],
                                            my_character['ancestry'],
                                            my_character['magic points']))

            if coin_toss == 1:
                if opponent_character['house'] == 'Gryffindor':
                    reply_choice = 'house'
                elif opponent_character['house'] == 'Slytherin':
                    catas.remove('house')
                    if opponent_character['birth year'] < 1930:
                        reply_choice = 'birth year'
                        catas.append('house')
                    else:
                        reply_choice = catas[random_cata2()]
                        catas.append('house')
                elif opponent_character['birth year'] < 1930:
                    reply_choice = 'birth year'
                else:
                    reply_choice = catas[random_cata()]

            elif coin_toss == 0:
                reply_choice = input(whichstat).lower()

            while reply_choice not in catas:
                if reply_choice in check:
                    rules_quit_checker(reply_choice, whichstat)
                    reply_choice = input(whichstat).lower()
                    if reply_choice in catas:
                        break
                    elif reply_choice in check:
                        rules_quit_checker(reply_choice, whichstat)
                        reply_choice = input(whichstat).lower()
                    else:
                        break
                elif reply_choice in catas:
                    break
                else:
                    reply_choice = input(nocomprende + reply_choice + pta + whichstat).lower()
                    continue

            if reply_choice in catas:
                my_stat = my_character[reply_choice]
                opponent_stat = opponent_character[reply_choice]

            if reply_choice == 'magic points':
                if my_stat > opponent_stat:
                    print(win)
                    user_score = user_score + 1
                elif my_stat < opponent_stat:
                    print(lose)
                    comp_score = comp_score + 1
                else:
                    print(draw)

            elif reply_choice == 'birth year' or 'house':
                if my_stat < opponent_stat:
                    print(win)
                    user_score = user_score + 1
                elif my_stat > opponent_stat:
                    print(lose)
                    comp_score = comp_score + 1
                else:
                    print(draw)

            elif reply_choice == 'ancestry':
                if my_stat == opponent_stat:
                    print(draw)
                elif ancestry_win():
                    print(win)
                    user_score = user_score + 1
                elif not ancestry_win():
                    print(lose)
                    comp_score = comp_score + 1

            if reply_choice in catas:
                print(comparison.format(opponent_character['name'], reply_choice,
                                        opponent_stat))


        # when all the rounds have happened, we compare the scores between the user and the computer
        else:
            if user_score > comp_score:
                print('You scored {} and your opponent scored {}, you win! '.format(user_score, comp_score))
            elif user_score < comp_score:
                print('You scored {} and your opponent scored {}, you lose! '.format(user_score, comp_score))
            elif user_score == comp_score:
                print('You scored {} and your opponent also scored {}, you draw! '.format(user_score, comp_score))

        replay = input(wupl).lower()

        while replay not in affneg:
            if replay in check:
                rules_quit_checker(replay, wupl)
                replay = input(wupl).lower()
                if replay in affneg:
                    break
                elif replay in check:
                    rules_quit_checker(replay, wupl)
                    replay = input(wupl).lower()
            elif replay in affneg:
                break
            else:
                replay = input(nocomprende + replay + pta + wupl).lower()
                continue

        if replay in affirmative:
            print("\nGlad you're enjoying the game! Let's go again!")
            run()
        elif replay in negative:
            print(gdbi)

    elif ready in negative:
        sure = input("\nAre you sure?\n").lower()
        if sure in affirmative:
            sure2 = input("\nLike... really really sure?\n").lower()
            if sure2 in affirmative:
                print(gdbi)
            elif sure2 in negative:
                run()
        elif sure in negative:
            run()
        else:
            print(nocomprende + ready + pta)
            run()
    else:
        run()


art()
print(welcome)
rules()
run()
